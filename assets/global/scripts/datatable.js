var Datatable = function () { var e; var t; var n; var r; var i; var s = false; var o = {}; var u = function () { var t = $('tbody > tr > td:nth-child(1) input[type="checkbox"]:checked', n).size(); var r = e.dataTable.oLanguage.sGroupActions; if (t > 0) $(".table-group-actions > span", i).text(r.replace("_TOTAL_", t)); else $(".table-group-actions > span", i).text("") }; return { init: function (a) { if (!$().dataTable) return; var f = this; a = $.extend(true, { src: "", filterApplyAction: "filter", filterCancelAction: "filter_cancel", resetGroupActionInputOnSuccess: true, dataTable: { sDom: "<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'<'table-group-actions pull-right'>>r><'table-scrollable't><'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>r>>", aLengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]], iDisplayLength: 10, oLanguage: { sProcessing: '<img src="' + Metronic.getGlobalImgPath() + 'loading-spinner-grey.gif"/><span>&nbsp;&nbsp;Loading...</span>', sLengthMenu: "<span class='seperator'>|</span>View _MENU_ records", sInfo: "<span class='seperator'>|</span>Found total _TOTAL_ records", sInfoEmpty: "No records found to show", sGroupActions: "_TOTAL_ records selected:  ", sAjaxRequestGeneralError: "Could not complete request. Please check your internet connection", sEmptyTable: "No data available in table", sZeroRecords: "No matching records found", oPaginate: { sPrevious: "Prev", sNext: "Next", sPage: "Page", sPageOf: "of" } }, aoColumnDefs: [{ bSortable: false, aTargets: [0] }], bAutoWidth: false, bSortCellsTop: true, sPaginationType: "bootstrap_extended", bProcessing: true, bServerSide: true, sAjaxSource: "", sServerMethod: "POST", fnServerData: function (t, r, s, o) { o.jqXHR = $.ajax({ dataType: "json", type: "POST", url: t, data: r, success: function (t, r, o) { if (t.sMessage) Metronic.alert({ type: t.sStatus == "OK" ? "success" : "danger", icon: t.sStatus == "OK" ? "check" : "warning", message: t.sMessage, container: i, place: "prepend" }); if (t.sStatus) if (e.resetGroupActionInputOnSuccess) $(".table-group-action-input", i).val(""); if ($(".group-checkable", n).size() === 1) { $(".group-checkable", n).attr("checked", false); $.uniform.update($(".group-checkable", n)) } if (e.onSuccess) e.onSuccess.call(undefined, f); s(t, r, o) }, error: function () { if (e.onError) e.onError.call(undefined, f); Metronic.alert({ type: "danger", icon: "warning", message: e.dataTable.oLanguage.sAjaxRequestGeneralError, container: i, place: "prepend" }); $(".dataTables_processing", i).remove() } }) }, fnServerParams: function (e) { $.each(o, function (t, n) { e.push({ name: t, value: n }) }) }, fnDrawCallback: function (e) { if (s === false) { s = true; n.show() } Metronic.initUniform($('input[type="checkbox"]', n)); u() } } }, a); e = a; n = $(a.src); r = n.parents(".table-container"); $.fn.dataTableExt.oStdClasses.sWrapper = $.fn.dataTableExt.oStdClasses.sWrapper + " dataTables_extended_wrapper"; t = n.dataTable(a.dataTable); i = n.parents(".dataTables_wrapper"); $(".dataTables_length select", i).addClass("form-control input-xsmall input-sm"); if ($(".table-actions-wrapper", r).size() === 1) { $(".table-group-actions", i).html($(".table-actions-wrapper", r).html()); $(".table-actions-wrapper", r).remove() } $(".group-checkable", n).change(function () { var e = $('tbody > tr > td:nth-child(1) input[type="checkbox"]', n); var t = $(this).is(":checked"); $(e).each(function () { $(this).attr("checked", t) }); $.uniform.update(e); u() }); n.on("change", 'tbody > tr > td:nth-child(1) input[type="checkbox"]', function () { u() }); n.on("click", ".filter-submit", function (r) { r.preventDefault(); f.setAjaxParam("sAction", e.filterApplyAction); $('textarea.form-filter, select.form-filter, input.form-filter:not([type="radio"],[type="checkbox"])', n).each(function () { f.setAjaxParam($(this).attr("name"), $(this).val()) }); $('input.form-filter[type="checkbox"]:checked, input.form-filter[type="radio"]:checked', n).each(function () { f.setAjaxParam($(this).attr("name"), $(this).val()) }); t.fnDraw() }); n.on("click", ".filter-cancel", function (r) { r.preventDefault(); $("textarea.form-filter, select.form-filter, input.form-filter", n).each(function () { $(this).val("") }); $('input.form-filter[type="checkbox"]', n).each(function () { $(this).attr("checked", false) }); f.clearAjaxParams(); f.setAjaxParam("sAction", e.filterCancelAction); t.fnDraw() }) }, getSelectedRowsCount: function () { return $('tbody > tr > td:nth-child(1) input[type="checkbox"]:checked', n).size() }, getSelectedRows: function () { var e = []; $('tbody > tr > td:nth-child(1) input[type="checkbox"]:checked', n).each(function () { e.push({ name: $(this).attr("name"), value: $(this).val() }) }); return e }, addAjaxParam: function (e, t) { o[e] = t }, setAjaxParam: function (e, t) { o[e] = t }, clearAjaxParams: function (e, t) { o = [] }, getDataTable: function () { return t }, getTableWrapper: function () { return i }, gettableContainer: function () { return r }, getTable: function () { return n } } }