function Category_GetAll_DataTable(e) { $("#hiddenIdCategoryParent").val(e); $("#dtCategory").each(function () { $("#dtCategory").dataTable().fnDestroy() }); var t = $("#dtCategory").dataTable({ oLanguage: { sProcessing: '<img src="' + Metronic.getGlobalImgPath() + 'loading-spinner-grey.gif"/><span>&nbsp;&nbsp;Loading...</span>', sLengthMenu: "_MENU_ records", oPaginate: { sPrevious: "Prev", sNext: "Next" }, sAjaxRequestGeneralError: "Could not complete request. Please check your internet connection", sEmptyTable: "No records to display", sZeroRecords: "No matching records found" }, aLengthMenu: [[5, 10, 20, 50, -1], [5, 10, 20, 50, "All"]], iDisplayLength: 5, bSortClasses: false, bStateSave: true, bPaginate: true, bAutoWidth: false, bProcessing: true, bServerSide: true, bDestroy: true, bRetrieve: true, sPaginationType: "bootstrap", fnServerData: function (t, n, r) { n.push({ name: "idCategoryParent", value: e }); $.getJSON(t, n, function (e) { r(e) }) }, sAjaxSource: window.location.origin + "/api/Backend_Category.asmx/GetAll_DataTable", fnInitComplete: function () { this.fnSetFilteringDelay(500) }, aoColumns: [{ mDataProp: "IDCategory", sWidth: "5%" }, { mDataProp: "Name", sWidth: "20%" }, { mDataProp: "Description", sWidth: "50%" }, { mDataProp: "Active", sWidth: "10%" }, { mDataProp: "IDCategory", sWidth: "15%" }], aoColumnDefs: [{ bSortable: false, aTargets: [4] }, { sClass: "text-center", aTargets: [0, 1, 2, 3, 4] }], fnRowCallback: function (e, t, n, r) { $("td:eq(3)", e).empty(); var i = '<a href="#" class="btn btn-sm btn_changestatus green tooltips" data_id="' + t.IDCategory + '" data_nama="' + t.Name + '" data-original-title="Active"><i class="glyphicon glyphicon-ok" title="Active"></i></a>'; if (t.Active != "True") i = '<a href="#" class="btn btn-sm red tooltips btn_changestatus" data_id="' + t.IDCategory + '" data_nama="' + t.Name + '" data-original-title="Deactive"><i class="glyphicon glyphicon-remove" title="Deactive"></i></a>'; $("td:eq(3)", e).append(i); $("td:eq(4)", e).empty(); var s = ""; s += '<a href="#" data_id="' + t.IDCategory + '" class="btn_view btn btn-sm green tooltips" data-original-title="View"><i class="glyphicon glyphicon-eye-open"></i></a> '; s += '<a href="#modalCategory_Update" data_id="' + t.IDCategory + '" class="btn_update btn btn-sm yellow tooltips" data-toggle="modal" data-original-title="Update"><i class="fa fa-edit"></i></a>'; s += '<a href="#" data_id="' + t.IDCategory + '" data_nama="' + t.Name + '" class="btn_delete btn btn-sm red tooltips" data-original-title="Delete"><i class="glyphicon glyphicon-trash"></i></a> '; $("td:eq(4)", e).append(s) }, fnDrawCallback: function (e) { $("a", this.fnGetNodes()).tooltip({ delay: 0, track: true, fade: 250 }); $(".btn_changestatus").click(function (e) { e.preventDefault(); var t = $(this).attr("data_id"); var n = $(this).attr("data_nama"); var r = $(this).attr("data-original-title"); var i = $("#hiddenIdCategoryParent").val(); if (r == "Active") { bootbox.confirm("Are you sure want to deactive <b>" + n + "</b> and this childs ?", function (e) { if (e) { bootbox.confirm("All Products of <b>" + n + "</b> will be deactived, proceed?", function (e) { if (e) { Category_ChangeStatus(t, i) } }) } }) } else { bootbox.confirm("Are you sure want to active <b>" + n + "</b> ?", function (e) { if (e) { bootbox.confirm("All Products of <b>" + n + "</b> will be actived, proceed?", function (e) { if (e) { Category_ChangeStatus(t, i) } }) } }) } }); $(".btn_view").click(function (e) { e.preventDefault(); var t = $(this).attr("data_id"); Category_GetBreadcrumb(t) }); $(".btn_delete").click(function (e) { e.preventDefault(); var t = $(this).attr("data_id"); var n = $(this).attr("data_nama"); var r = $("#hiddenIdCategoryParent").val(); bootbox.confirm("Are you sure want to delete <b>" + n + "</b> ?", function (e) { if (e) { bootbox.confirm("All Products of <b>" + n + "</b> will be deleted, proceed?", function (e) { if (e) { Category_Delete(t, r) } }) } }) }); $(".btn_update").click(function (e) { e.preventDefault(); var t = $(this).attr("data_id"); var n = $("#hiddenIdCategoryParent").val(); Category_GetDetail(t) }) } }); jQuery("#dtCategory_wrapper .dataTables_filter input").addClass("form-control input-medium input-inline"); jQuery("#dtCategory_wrapper .dataTables_length select").addClass("form-control input-xsmall"); jQuery("#dtCategory_wrapper .dataTables_length select").select2(); Category_ValidationInsert($("#formCategory_Insert")) } function Category_GetBreadcrumb(e) { $.ajax({ type: "POST", url: window.location.origin + "/api/Backend_Category.asmx/GetBreadcrumb", data: JSON.stringify({ idCategoryParent: +e }), contentType: "application/json; charset=utf-8", dataType: "json", success: function (e) { $("ul.breadcrumb").empty(); $("#page-title").empty(); var t = ""; t += '<li><i class="fa fa-home"></i> <a href="../../">Dashboard</a></li>'; t += '<li><i class="fa fa-angle-right"></i></li>'; t += '<li><a href="../">Catalog</a></li>'; t += '<li><i class="fa fa-angle-right"></i></li>'; t += '<li><a href="javascript:;" class="bc-link" onclick="Category_GetBreadcrumb(0)" data_id="0" data_nama="Categories"> Categories </a></li>'; var n = e.d; if (n != null && n.length != 0) { $("#page-title").append(n[n.length - 1].Name + " <small>Categories</small>"); for (var r = 0; r < n.length; r++) { t += '<li><i class="fa fa-angle-right"></i></li>'; t += '<li><a href="javascript:;" class="bc-link" onclick="Category_GetBreadcrumb(' + n[r].IDCategory + ')" >' + n[r].Name + "</a></li>" } } else { $("#page-title").append("Categories") } $("ul.breadcrumb").append(t) }, complete: function () { Category_GetAll_DataTable(e) } }) } function Category_ChangeStatus(e, t) { $.ajax({ type: "POST", url: window.location.origin + "/api/Backend_Category.asmx/ChangeStatus", data: JSON.stringify({ idCategory: +e }), dataType: "json", contentType: "application/json; charset=utf-8", success: function (e, n, r) { if (e.d.Status == "Success") { toastr.success(e.d.Deskripsi); Category_GetAll_DataTable(t) } else if (e.d.Status == "Warning") { toastr.warning(e.d.Deskripsi) } else { toastr.error(e.d.Deskripsi) } } }) } function Category_Delete(e, t) { $.ajax({ type: "POST", url: window.location.origin + "/api/Backend_Category.asmx/Delete", data: JSON.stringify({ idCategory: e }), async: true, dataType: "json", contentType: "application/json; charset=utf-8", success: function (e, n, r) { if (e.d.Status == "Success") { toastr.success(e.d.Deskripsi); Category_GetAll_DataTable(t) } else if (e.d.Status == "Warning") { toastr.warning(e.d.Deskripsi) } else { toastr.error(e.d.Deskripsi) } } }) } function Category_ValidationInsert(e) { var t = $(".alert-danger", e); e.validate({ errorElement: "span", errorClass: "help-block", focusInvalid: true, ignore: "", messages: {}, rules: { fuImage: { extension: "png|jpe?g|gif", size: true }, tbName: { required: true, minlength: 3, maxlength: 25, exists: true } }, errorPlacement: function (e, t) { if (t.parent(".input-group").size() > 0) { e.insertAfter(t.parent(".input-group")) } else if (t.attr("data-error-container")) { e.appendTo(t.attr("data-error-container")) } else if (t.parents(".radio-list").size() > 0) { e.appendTo(t.parents(".radio-list").attr("data-error-container")) } else if (t.parents(".radio-inline").size() > 0) { e.appendTo(t.parents(".radio-inline").attr("data-error-container")) } else if (t.parents(".checkbox-list").size() > 0) { e.appendTo(t.parents(".checkbox-list").attr("data-error-container")) } else if (t.parents(".checkbox-inline").size() > 0) { e.appendTo(t.parents(".checkbox-inline").attr("data-error-container")) } else if (t.parents(".input-group").size() > 0) { e.insertAfter(t.parents(".input-group")) } else { e.insertAfter(t) } }, invalidHandler: function (e, n) { t.show(); Metronic.scrollTo(t, -200) }, highlight: function (e) { $(e).closest(".form-group").addClass("has-error") }, unhighlight: function (e) { $(e).closest(".form-group").removeClass("has-error") }, success: function (e) { e.closest(".form-group").removeClass("has-error") }, onkeyup: false, submitHandler: function (e) { t.hide(); var n = document.getElementById("fuImage").files[0]; var r = $("#tbName").val(); var i = $("#hiddenIdCategoryParent").val(); var s = true; if (!$("#cbActive").is(":checked")) { s = false } var o = $("#tbDescription").val(); if ($("#fuImage").val() !== "") { var u = new FileReader; u.onload = function (e) { var t = e.target.result; var n = $("#fuImage").val().split("/").pop().split("\\").pop(); Category_Insert(t, n, i, r, o, s) }; u.readAsDataURL(n) } else { Category_Insert("", "", i, r, o, s) } } }); jQuery.validator.addMethod("size", function (e, t, n) { if (jQuery(t).attr("type") === "file") { if (t.files[0]) { file = t.files[0]; size = file.size / 1024 / 1024; if (size > 2) { return false } } } return true }, jQuery.validator.format("Maximum file size is 2MB.")); jQuery.extend(jQuery.validator.messages, { extension: jQuery.validator.format("Allowed Extension are : .png .jpe?g .gif.") }); jQuery.validator.addMethod("exists", function (e, t, n) { return Category_ValidationName_Add(e) }, "Category is already exists.") } function Category_ValidationName_Add(e) { var t = false; $("#tbName").attr("readonly", true).attr("disabled", true).addClass("spinner"); $.ajax({ type: "POST", url: window.location.origin + "/api/Backend_Category.asmx/ValidationName_Add", data: '{"name":"' + e + '"}', async: false, dataType: "json", contentType: "application/json; charset=utf-8", success: function (e, n, r) { if (e.d) t = true }, error: function (e, n, r) { if (e.status === 0) { toastr.error("<b>Not connect. Please, Verify Network.</b>") } else if (e.status == 404) { toastr.error("<b>Requested page not found. [404]</b>") } else if (e.status == 500) { toastr.error("<b>Internal Server Error [500]</b>") } else if (r === "parsererror") { toastr.error("<b>Requested JSON parse failed</b>") } else if (r === "timeout") { toastr.error("<b>Time out error</b>") } else if (r === "abort") { toastr.error("<b>Ajax request aborted</b>") } else { toastr.error("<b>Uncaught Error.</b>") } t = true } }); $("#tbName").attr("readonly", false).attr("disabled", false).removeClass("spinner"); return t } function Category_Insert(e, t, n, r, i, s) { $.ajax({ type: "POST", url: window.location.origin + "/api/Backend_Category.asmx/Add", data: JSON.stringify({ baseImage: e, fnImage: t, idCategoryParent: n, name: r, description: i, active: s }), dataType: "json", contentType: "application/json; charset=utf-8", success: function (e, t, r) { if (e.d.Status == "Success") { toastr.success(e.d.Deskripsi); $("#formCategory_Insert").clearForm(); Category_GetAll_DataTable(n) } else if (e.d.Status == "Warning") { toastr.warning(e.d.Deskripsi) } else { toastr.error(e.d.Deskripsi) } } }); $(".default").trigger("click") } function Category_GetDetail(e) { $.ajax({ type: "POST", url: window.location.origin + "/api/Backend_Category.asmx/GetDetail", data: JSON.stringify({ idCategory: e }), dataType: "json", contentType: "application/json; charset=utf-8", success: function (e, t, n) { if (e.d != null) { Category_SetForm(e.d) } else { toastr.error("<b>Category is not exists.</b>"); window.setTimeout(function () { location.href = "./Default.aspx" }, 1e3) } }, error: function (e, t, n) { if (e.status === 0) { toastr.error("<b>Not connect. Please, Verify Network.</b>") } else if (e.status == 404) { toastr.error("<b>Requested page not found. [404]</b>") } else if (e.status == 500) { toastr.error("<b>Internal Server Error [500]</b>") } else if (n === "parsererror") { toastr.error("<b>Requested JSON parse failed</b>") } else if (n === "timeout") { toastr.error("<b>Time out error</b>") } else if (n === "abort") { toastr.error("<b>Ajax request aborted</b>") } else { toastr.error("<b>Uncaught Error.</b>") } window.setTimeout(function () { location.href = "./Default.aspx" }, 1e3) }, beforeSend: function () { Metronic.blockUI({ boxed: true, message: "Processing..." }) }, complete: function () { Metronic.unblockUI() } }) } function Category_SetForm(e) { var t = new Date; $(".title-value-modal_update").html("Update Category : <b>" + e.Name + "</b>"); $("#hiddenIdCategoryUpdate").val(e.IDCategory); $("#imgSrc_Update").attr("src", window.location.origin + "/assets/images/category/" + e.Image + "?v=" + t.getTime()); $("#tbName_Update").val(e.Name); if (e.Active) { $(".bootstrap-switch-id-cbActive_Update").removeClass("bootstrap-switch-off"); $(".bootstrap-switch-id-cbActive_Update").addClass("bootstrap-switch-on"); $("#cbActive_Update").attr("checked", "true") } else { $(".bootstrap-switch-id-cbActive_Update").removeClass("bootstrap-switch-on"); $(".bootstrap-switch-id-cbActive_Update").addClass("bootstrap-switch-off"); $("#cbActive_Update").attr("checked", "false") } $("#tbDescription_Update").code(e.Description); Category_ValidationUpdate($("#formCategory_Update")) } function Category_ValidationUpdate(e) { var t = $(".alert-danger", e); e.validate({ errorElement: "span", errorClass: "help-block", focusInvalid: true, ignore: "", messages: {}, rules: { fuImage_Update: { extension: "png|jpe?g|gif", size: true }, tbName_Update: { required: true, minlength: 3, maxlength: 25, existsUpdate: true } }, errorPlacement: function (e, t) { if (t.parent(".input-group").size() > 0) { e.insertAfter(t.parent(".input-group")) } else if (t.attr("data-error-container")) { e.appendTo(t.attr("data-error-container")) } else if (t.parents(".radio-list").size() > 0) { e.appendTo(t.parents(".radio-list").attr("data-error-container")) } else if (t.parents(".radio-inline").size() > 0) { e.appendTo(t.parents(".radio-inline").attr("data-error-container")) } else if (t.parents(".checkbox-list").size() > 0) { e.appendTo(t.parents(".checkbox-list").attr("data-error-container")) } else if (t.parents(".checkbox-inline").size() > 0) { e.appendTo(t.parents(".checkbox-inline").attr("data-error-container")) } else if (t.parents(".input-group").size() > 0) { e.insertAfter(t.parents(".input-group")) } else { e.insertAfter(t) } }, invalidHandler: function (e, n) { t.show(); Metronic.scrollTo(t, -200) }, highlight: function (e) { $(e).closest(".form-group").addClass("has-error") }, unhighlight: function (e) { $(e).closest(".form-group").removeClass("has-error") }, success: function (e) { e.closest(".form-group").removeClass("has-error") }, onkeyup: false, submitHandler: function (e) { t.hide(); var n = $("#hiddenIdCategoryUpdate").val(); var r = $("#hiddenIdCategoryParent").val(); var i = $("#tbName_Update").val(); var s = $("#tbDescription_Update").code(); var o = true; if (!$("#cbActive_Update").is(":checked")) { o = false } if ($("#fuImage_Update").val() !== "") { var u = new FileReader; u.onload = function (e) { var t = e.target.result; var u = $("#fuImage_Update").val().split("/").pop().split("\\").pop(); Category_Update(n, r, t, u, i, s, o) }; u.readAsDataURL(file) } else { Category_Update(n, r, "", "", i, s, o) } } }); jQuery.validator.addMethod("size", function (e, t, n) { if (jQuery(t).attr("type") === "file") { if (t.files[0]) { file = t.files[0]; size = file.size / 1024 / 1024; if (size > 2) { return false } } } return true }, jQuery.validator.format("Maximum file size is 2MB.")); jQuery.extend(jQuery.validator.messages, { extension: jQuery.validator.format("Allowed Extension are : .png .jpe?g .gif.") }); jQuery.validator.addMethod("existsUpdate", function (e, t, n) { var r = $("#hiddenIdCategoryUpdate").val(); return Category_ValidationName_Update(e, r) }, "Category is already exists.") } function Category_ValidationName_Update(e, t) { var n = false; $("#tbName_Update").attr("readonly", true).attr("disabled", true).addClass("spinner"); $.ajax({ type: "POST", url: window.location.origin + "/api/Backend_Category.asmx/ValidationName_Update", data: '{"idCategory":"' + t + '", "name":"' + e + '"}', async: false, dataType: "json", contentType: "application/json; charset=utf-8", success: function (e, t, r) { if (e.d) n = true }, error: function (e, t, r) { if (e.status === 0) { toastr.error("<b>Not connect. Please, Verify Network.</b>") } else if (e.status == 404) { toastr.error("<b>Requested page not found. [404]</b>") } else if (e.status == 500) { toastr.error("<b>Internal Server Error [500]</b>") } else if (r === "parsererror") { toastr.error("<b>Requested JSON parse failed</b>") } else if (r === "timeout") { toastr.error("<b>Time out error</b>") } else if (r === "abort") { toastr.error("<b>Ajax request aborted</b>") } else { toastr.error("<b>Uncaught Error.</b>") } n = true } }); $("#tbName_Update").attr("readonly", false).attr("disabled", false).removeClass("spinner"); return n } function Category_Update(e, t, n, r, i, s, o) { $.ajax({ type: "POST", url: window.location.origin + "/api/Backend_Category.asmx/Update", data: JSON.stringify({ idCategory: e, idCategoryParent: t, baseImage: n, fnImage: r, name: i, description: s, active: o }), dataType: "json", contentType: "application/json; charset=utf-8", success: function (e, n, r) { if (e.d.Status == "Success") { toastr.success(e.d.Deskripsi); $("#formCategory_Update").clearForm(); Category_GetAll_DataTable(t); $(".default").trigger("click") } else if (e.d.Status == "Warning") { toastr.warning(e.d.Deskripsi) } else { toastr.error(e.d.Deskripsi) } } }) } $(document).ready(function () { Toastr.init(); $(".summernote").summernote({ height: 200 }); $("#menu_catalog").addClass("active"); $("#submenu_category").addClass("active"); $("#arrow_catalog").addClass("open"); $(document).ajaxStop(function () { console.clear() }); Category_GetBreadcrumb(0) })